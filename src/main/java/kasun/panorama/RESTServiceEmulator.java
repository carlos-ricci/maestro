package kasun.panorama;

import io.netty.handler.codec.http.HttpMethod;
import io.netty.handler.codec.http.HttpResponseStatus;
import org.wso2.gw.emulator.dsl.Emulator;

import static org.wso2.gw.emulator.http.server.contexts.HttpServerConfigBuilderContext.configure;
import static org.wso2.gw.emulator.http.server.contexts.HttpServerRequestBuilderContext.request;
import static org.wso2.gw.emulator.http.server.contexts.HttpServerResponseBuilderContext.response;

public class RESTServiceEmulator {
    public static void main(String[] args) {

        String largePayload = "<Entries xmlns=\"http://ws.wso2.org/dataservice\">\n" +
                              "    <Entry>\n" +
                              "        <ID>5076746</ID>\n" +
                              "        <guid>OAIMFC6TTDSF01</guid>\n" +
                              "        <suid>OAIMFC6TTDSF</suid>\n" +
                              "        <revision_id>2016-07-18T16:02:30.226Z</revision_id>\n" +
                              "        <published_at_string>2016-07-18T14:47:36.861Z</published_at_string>\n" +
                              "        <transaction_id>urn:uuid:58ee3d95-c420-4920-b5ff-e0ac2aae90af</transaction_id>\n" +
                              "        <source_id>ID:nyclqsynesbap01.addmz.bloomberg.com-57434-1468856404812-177:6:3168:1:1</source_id>\n" +
                              "        <newsml>\n" +
                              "            PE5ld3NNTCB4bWxucz0iaHR0cDovL2lwdGMub3JnL3N0ZC9OZXdzTUwvMjAwMy0xMC0xMC8iPgogICA8TmV3c0VudmVsb3BlPgogICAgICA8RGF0ZUFuZFRpbWU+MjAxNi0wNy0xOFQxNjowMjozMFo8L0RhdGVBbmRUaW1lPgogICAgICA8TmV3c1NlcnZpY2UgRm9ybWFsTmFtZT0iYmxvb21icmciLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IkJJWk5FV1MiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IkJPTiIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iQlVTSU5FU1MiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IkNPTVRPUCIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iRklOTkVXUyIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iRkxPV0NNUyIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iR0FERkxZIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJHQURGVE9QIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJHT1dFQiIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iS0FJU1NBUiIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iTUFSS0VUUyIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iTllYIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJPTldFQiIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iT1JJR0lOQUwiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IlJFQUQiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IlJFQUQxMDAiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IlJFQUQxNTAiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IlJFQUQyNSIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iUkVBRDI1MCIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iUkVBRDUwIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJTVEsiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IkVRVUlUWUtFWSIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iQUxMRkVBIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJBTExUT1AiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IkFUVEFDSE1FTlQiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IklOVEVSTkFMIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJCQlBST0ZJTEUiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9Ik1BSk9SIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJNSVNDIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJUSU1FTkkiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IkNPTFVNTklTVFMiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IkNPTFVNTlMiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IlBIT1RPIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJUSU1FQ08iLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IlNSQ1JBTks1Ii8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJVU0JOWCIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iQ09TIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJJTkRVU1RSSUVTIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJCQVNJQyIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iQ01EIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJNRVRNTkciLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IkNNREtFWSIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iV09STEQiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IlNQUkVHSU9OUyIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iTU5HIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJDTURYIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJNRVQiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9Ik1FVEFMS0VZIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJQT0xJUklTSyIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iR09WIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJQQ1MiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IkZJQVNTVCIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iR0xEIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJERUJUS0VZIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJSQVRFU0tFWSIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iR0JOIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJGSUFMTCIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iTk9ORkVSUiIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iUE9MTkVXUyIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iRzdNRU1CIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJHMTBNRU1CIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJOT1JUSEFNIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJNU0NJV09STEQiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IkRDIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJNU0NJTkFNRVIiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IlRSRSIvPgogICAgICA8TmV3c1Byb2R1Y3QgRm9ybWFsTmFtZT0iVVMiLz4KICAgICAgPE5ld3NQcm9kdWN0IEZvcm1hbE5hbWU9IlVTR09WIi8+CiAgICAgIDxOZXdzUHJvZHVjdCBGb3JtYWxOYW1lPSJGSU5NSU4iLz4KICAgPC9OZXdzRW52ZWxvcGU+CiAgIDxOZXdzSXRlbT4KICAgICAgPElkZW50aWZpY2F0aW9uPgogICAgICAgICA8TmV3c0lkZW50aWZpZXI+CiAgICAgICAgICAgIDxQcm92aWRlcklkPmJsb29tYmVyZy5jb208L1Byb3ZpZGVySWQ+CiAgICAgICAgICAgIDxEYXRlSWQ+MjAxNjA3MTg8L0RhdGVJZD4KICAgICAgICAgICAgPE5ld3NJdGVtSWQ+T0FJTUZDNlRURFNGPC9OZXdzSXRlbUlkPgogICAgICAgICAgICA8UmV2aXNpb25JZCBVcGRhdGU9Ik4iIFByZXZpb3VzUmV2aXNpb249IjAiPjE8L1JldmlzaW9uSWQ+CiAgICAgICAgICAgIDxQdWJsaWNJZGVudGlmaWVyPnVybjpuZXdzbWw6Ymxvb21iZXJnLmNvbToyMDE2MDcxODpPQUlNRkM2VFREU0Y6MTwvUHVibGljSWRlbnRpZmllcj4KICAgICAgICAgPC9OZXdzSWRlbnRpZmllcj4KICAgICAgICAgPERhdGVMYWJlbD4xOCBKdWx5IDIwMTY8L0RhdGVMYWJlbD4KICAgICAgPC9JZGVudGlmaWNhdGlvbj4KICAgICAgPE5ld3NNYW5hZ2VtZW50PgogICAgICAgICA8TmV3c0l0ZW1UeXBlIEZvcm1hbE5hbWU9Ik5ld3MiLz4KICAgICAgICAgPEZpcnN0Q3JlYXRlZD4yMDE2MDcxOFQxNDQ3MzZaPC9GaXJzdENyZWF0ZWQ+CiAgICAgICAgIDxUaGlzUmV2aXNpb25DcmVhdGVkPjIwMTYwNzE4VDE2MDIzMFo8L1RoaXNSZXZpc2lvbkNyZWF0ZWQ+CiAgICAgICAgIDxTdGF0dXMgRm9ybWFsTmFtZT0iVXNhYmxlIi8+CiAgICAgICAgIDxVcmdlbmN5IEZvcm1hbE5hbWU9IjMiLz4KICAgICAgPC9OZXdzTWFuYWdlbWVudD4KICAgICAgPE5ld3NDb21wb25lbnQgRXF1aXZhbGVudHNMaXN0PSJubyIgeG1sOmxhbmc9IkVOIj4KICAgICAgICAgPFJvbGUgRm9ybWFsTmFtZT0iRGVzY3JpcHRpb24iLz4KICAgICAgICAgPE5ld3NMaW5lcz4KICAgICAgICAgICAgPEhlYWRMaW5lPk1hcmtldHMgQXJlIFVwIGFuZCBJbnZlc3RvcnMgQXJlIFN0dWNrIGluIHRoZSBNaWRkbGU6IEdhZGZseTwvSGVhZExpbmU+CiAgICAgICAgICAgIDxTbHVnTGluZT5CQy1JTlZFU1RPUlMtQVJFLVNUVUNLLUlOLVRIRS1NSURETEU8L1NsdWdMaW5lPgogICAgICAgICAgICA8QnlMaW5lPk5pciBLYWlzc2FyPC9CeUxpbmU+CiAgICAgICAgICAgIDxDb3B5cmlnaHRMaW5lPsKpMjAxNiBCbG9vbWJlcmcgTC5QLjwvQ29weXJpZ2h0TGluZT4KICAgICAgICAgICAgPEtleXdvcmRMaW5lPkJJWk5FV1M7IEJPTjsgQlVTSU5FU1M7IENPTVRPUDsgRklOTkVXUzsgRkxPV0NNUzsgR0FERkxZOyBHQURGVE9QOyBHT1dFQjsgS0FJU1NBUjsgTUFSS0VUUzsgTllYOyBPTldFQjsgT1JJR0lOQUw7IFJFQUQ7IFJFQUQxMDA7IFJFQUQxNTA7IFJFQUQyNTsgUkVBRDI1MDsgUkVBRDUwOyBTVEs7IEVRVUlUWUtFWTsgQUxMRkVBOyBBTExUT1A7IEFUVEFDSE1FTlQ7IElOVEVSTkFMOyBCQlBST0ZJTEU7IE1BSk9SOyBNSVNDOyBUSU1FTkk7IENPTFVNTklTVFM7IENPTFVNTlM7IFBIT1RPOyBUSU1FQ087IFNSQ1JBTks1OyBVU0JOWDsgQ09TOyBJTkRVU1RSSUVTOyBCQVNJQzsgQ01EOyBNRVRNTkc7IENNREtFWTsgV09STEQ7IFNQUkVHSU9OUzsgTU5HOyBDTURYOyBNRVQ7IE1FVEFMS0VZOyBQT0xJUklTSzsgR09WOyBQQ1M7IEZJQVNTVDsgR0xEOyBERUJUS0VZOyBSQVRFU0tFWTsgR0JOOyBGSUFMTDsgTk9ORkVSUjsgUE9MTkVXUzsgRzdNRU1COyBHMTBNRU1COyBOT1JUSEFNOyBNU0NJV09STEQ7IERDOyBNU0NJTkFNRVI7IFRSRTsgVVM7IFVTR09WOyBGSU5NSU48L0tleXdvcmRMaW5lPgogICAgICAgICAgICA8TmV3c0xpbmU+CiAgICAgICAgICAgICAgIDxOZXdzTGluZVR5cGUgRm9ybWFsTmFtZT0iRmlyc3RQYXJhZ3JhcGgiLz4KICAgICAgICAgICAgICAgPE5ld3NMaW5lVGV4dD5JZiAyMDE1IHdhcyB0aGUgeWVhciB0aGF0IG5vdGhpbmcgd29ya2VkLCB0aGVuIDIwMTYgaXMgc2hhcGluZyB1cCB0byBiZSB0aGUgeWVhciB0aGF0IGV2ZXJ5dGhpbmcgd29ya2VkLiBCb25kcyBhcmUgdXAuIFN0b2NrcyBhcmUgdXAuIFJlYWwgYXNzZXRzIGFyZSB1cC4gR29sZCBpcyB1cC4gR28gYWhlYWQg4oCTIHBpY2sgeW91ciBmYXZvcml0ZSBhc3NldCAtLSBpdOKAmXMgbGlrZWx5IHRvIGJlIHVwIGFzIHdlbGwuPC9OZXdzTGluZVRleHQ+CiAgICAgICAgICAgIDwvTmV3c0xpbmU+CiAgICAgICAgIDwvTmV3c0xpbmVzPgogICAgICAgICA8QWRtaW5pc3RyYXRpdmVNZXRhZGF0YT4KICAgICAgICAgICAgPEZpbGVOYW1lPk9BSU1GQzZUVERTRjAwMDAwX0ROTUxFTmYtMjAxNjA3MTgxNjAzNTcueG1sPC9GaWxlTmFtZT4KICAgICAgICAgPC9BZG1pbmlzdHJhdGl2ZU1ldGFkYXRhPgogICAgICAgICA8RGVzY3JpcHRpdmVNZXRhZGF0YT4KICAgICAgICAgICAgPFByb3BlcnR5IEZvcm1hbE5hbWU9Imdyb3VwaWQiIFZhbHVlPSJPQUlNRkM2VFREU0YwMSIvPgogICAgICAgICAgICA8UHJvcGVydHkgRm9ybWFsTmFtZT0idG9waWNzIiBWYWx1ZT0iQklaTkVXUyBCT04gQlVTSU5FU1MgQ09NVE9QIEZJTk5FV1MgRkxPV0NNUyBHQURGTFkgR0FERlRPUCBHT1dFQiBLQUlTU0FSIE1BUktFVFMgTllYIE9OV0VCIE9SSUdJTkFMIFJFQUQgUkVBRDEwMCBSRUFEMTUwIFJFQUQyNSBSRUFEMjUwIFJFQUQ1MCBTVEsgRVFVSVRZS0VZIEFMTEZFQSBBTExUT1AgQVRUQUNITUVOVCBJTlRFUk5BTCBCQlBST0ZJTEUgTUFKT1IgTUlTQyBUSU1FTkkgQ09MVU1OSVNUUyBDT0xVTU5TIFBIT1RPIFRJTUVDTyBTUkNSQU5LNSBVU0JOWCBDT1MgSU5EVVNUUklFUyBCQVNJQyBDTUQgTUVUTU5HIENNREtFWSBXT1JMRCBTUFJFR0lPTlMgTU5HIENNRFggTUVUIE1FVEFMS0VZIFBPTElSSVNLIEdPViBQQ1MgRklBU1NUIEdMRCBER\n" +
                              "            \n" +
                              "            WUgaGlnaCByaXNrIGluIHRyYWRpdGlvbmFsIHNhZmUgaGF2ZW5zIGxpa2UgZ292ZXJubWVudCBib25kcy4gwqDCoMKgPC9wPjxwPkludmVzdG9ycyBzdGlsbCBhZ3JlZSB0aGF0IHRoZSBjdXJyZW50IGludmVzdG1lbnQgZW52aXJvbm1lbnQgaXMgcHJlY2FyaW91cy4gSnVzdCBkb27igJl0IGV4cGVjdCBjb25zZW5zdXMgYW55IGxvbmdlciBhYm91dCBob3cgdG8gZGVhbCB3aXRoIGl0LjwvcD48cD5UaGlzIGNvbHVtbiBkb2VzIG5vdCBuZWNlc3NhcmlseSByZWZsZWN0IHRoZSBvcGluaW9uIG9mIEJsb29tYmVyZyBMUCBhbmQgaXRzIG93bmVycy48L3A+PHA+VG8gY29udGFjdCB0aGUgYXV0aG9yIG9mIHRoaXMgc3Rvcnk6IE5pciBLYWlzc2FyIGluIFdhc2hpbmd0b24gYXQgbmthaXNzYXIxQGJsb29tYmVyZy5uZXQuIDwvcD48cD5UbyBjb250YWN0IHRoZSBlZGl0b3IgcmVzcG9uc2libGUgZm9yIHRoaXMgc3Rvcnk6IFRpbW90aHkgTC4gTydCcmllbiBhdCB0b2JyaWVuNDZAYmxvb21iZXJnLm5ldC4gPC9wPjxwPsKpMjAxNiBCbG9vbWJlcmcgTC5QLjwvcD48L2JvZHk+CiAgICAgICAgICAgICAgICAgIDwvaHRtbD4KICAgICAgICAgICAgICAgPC9EYXRhQ29udGVudD4KICAgICAgICAgICAgPC9Db250ZW50SXRlbT4KICAgICAgICAgPC9OZXdzQ29tcG9uZW50PgogICAgICA8L05ld3NDb21wb25lbnQ+CiAgIDwvTmV3c0l0ZW0+CjwvTmV3c01MPg==\n" +
                              "        </newsml>\n" +
                              "    </Entry>\n" +
                              "</Entries>\n";

        Emulator.getHttpEmulator()
                .server()
                .given(configure().host("127.0.0.1").port(7070).context("/api"))
                .when(request()
                              .withPath("employee")
                              .withMethod(HttpMethod.POST))
                .then(response()
                              .withBody(largePayload)
                              .withStatusCode(HttpResponseStatus.OK)
                              .withHeader("Content-Type", "application/xml"))
                .operation().start();

    }
}
